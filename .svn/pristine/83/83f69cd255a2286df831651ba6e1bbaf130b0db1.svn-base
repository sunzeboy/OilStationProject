package cn.sh.changxing.ct.mobile.activity;

import java.io.Serializable;
import java.util.HashMap;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import cn.sh.changxing.ct.mobile.bdmap.adapter.BdNaviManagerAdapter;
import cn.sh.changxing.ct.mobile.bdmap.adapter.entity.PoiInfoEx;
import cn.sh.changxing.ct.mobile.comm.ActivityEx;
import cn.sh.changxing.ct.mobile.comm.FragmentEx;
import cn.sh.changxing.ct.mobile.comm.IFragmentsManager;
import cn.sh.changxing.ct.mobile.fragment.lbs.GasStationDetailedInfoFragment;
import cn.sh.changxing.ct.mobile.fragment.lbs.MapOperFragment;
import cn.sh.changxing.ct.mobile.fragment.lbs.MapResultListFragment;
import cn.sh.changxing.ct.mobile.fragment.lbs.MapSettingFragment;
import cn.sh.changxing.ct.mobile.fragment.lbs.MapViewFragment;
import com.ionicframework.cnpcmobile317812.R;
import cn.sh.changxing.ct.mobile.logic.lbs.MarkerManagerLogic;
import cn.sh.changxing.ct.mobile.logic.lbs.SearchAroundPoiLogic;
import cn.sh.changxing.ct.mobile.view.lbs.broadcast.SearchResultBroadcastReceiver;

/**
 * <b>Function Name�?/b>activity base class<br>
 * <b>History�?/b>2015/3/26 wangjianqing create<br>
 * <br>
 *
 * @author SIS wangjianqing
 * @version 1.0.0 2015/3/26
 */
public class LbsActivity extends ActivityEx
{
	// constant definition
	public final static String INTENT_ACTION_NAME_SHOW_POI_POPUP_BAR = "cn.sh.changxing.ct.mobile.action.LBS_SHOW_POI_POPUP_BAR";
	public final static String INTENT_ACTION_NAME_SEARCH_POI_BY_KEYWORD = "cn.sh.changxing.ct.mobile.action.LBS_SEARCH_POI_BY_KEYWORD";
	public final static String INTENT_ACTION_NAME_SEARCH_POI_AROUND = "cn.sh.changxing.ct.mobile.action.LBS_SEARCH_POI_AROUND";
	public final static String INTENT_ACTION_NAME_SHOW_SCREEN_OF_MAP_SETTING = "cn.sh.changxing.ct.mobile.action.LBS_SHOW_SCREEN_OF_MAP_SETTING"; 
	
	// extra item name definition for intent which action name is INTENT_ACTION_NAME_SHOW_POI_POPUP_BAR
	public final static String INTENT_ACTION_EXTRA_ITEM_NAME_SHOWN_POI_INFO = "ShownPoiInfo";
	
	// member variable
	private MapViewFragment mMapViewFragment;
	private MapOperFragment mMapOperFragment;
	// 地图上的显示设置，这个是在mMapOperFragment上创建的按钮调用
	//private MapDisplaySetFragment mMapDisplaySetFragment;
	private Bundle mSavedInstanceState;
	private HashMap<UIFragmentType, Class<?>> mUIFragmentTypeMap;
	private SearchResultBroadcastReceiver mSearchResultBroadcastReceiver;
	
	public enum UIFragmentType
	{
		// 设置油型号
		TYPE_SETTINGS_OIL_TYPE,
		// 以列表形式显示所有加油站
		TYPE_RESULT_LIST_MAP,
		// 显示加油站详细信息
		TYPE_GAS_STATION_DETAILED_INFO,
	}
	
	// constructor
	public LbsActivity()
	{
		super();
		setIsFinishOnFragmentsNone(false);
		initUIFragmentMap();
	}
	
	private void initMapViewFragment()
	{
		mMapViewFragment = (MapViewFragment) getFragmentManager().findFragmentById(R.id.map_view_container);
	}
	
	private void initMapOperFragment()
	{
		if (mMapOperFragment == null)
		{
			mMapOperFragment = new MapOperFragment();
			replaceFragment(R.id.map_oper_container, mMapOperFragment, false);
		}
	}
	
	private void hideMapOperFragment()
	{
		if (mMapOperFragment != null)
		{
			mMapOperFragment.resetSubViewLayers();
			View fragmentRootView = mMapOperFragment.getView();
			if (fragmentRootView != null)
			{
				fragmentRootView.setVisibility(View.GONE);
			}
		}
	}
	
	private void appearMapOperFragment()
	{
		if (mMapOperFragment != null)
		{
			View fragmentRootView = mMapOperFragment.getView();
			if (fragmentRootView != null)
			{
				fragmentRootView.setVisibility(View.VISIBLE);
			}
		}
	}

	private void initUIFragmentMap()
	{
		mUIFragmentTypeMap = new HashMap<UIFragmentType, Class<?>>(UIFragmentType.values().length);
		mUIFragmentTypeMap.put(UIFragmentType.TYPE_SETTINGS_OIL_TYPE, MapSettingFragment.class);
		mUIFragmentTypeMap.put(UIFragmentType.TYPE_RESULT_LIST_MAP, MapResultListFragment.class);
		mUIFragmentTypeMap.put(UIFragmentType.TYPE_GAS_STATION_DETAILED_INFO, GasStationDetailedInfoFragment.class);
	}
	
	private void initFragments()
	{
		initMapViewFragment();		
		initMapOperFragment();
	}

	/**
	 * do intent action process
	 */
	protected void doIntentActionProcess()
	{
		try
		{
			Intent intent = getIntent();
			dispatchIntentAction(intent);
		}
		catch (Exception ex)
		{
			System.err.println(LOG_TAG + " Exception:" + ex.getMessage());
			ex.printStackTrace();
		}
	}
	
	/**
	 * dispatch intent action
	 */
	protected void dispatchIntentAction(Intent intent)
	{	 
	}
	
	@Override
	protected void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		
		mSavedInstanceState = savedInstanceState;
		
		setContentView(R.layout.activity_lbs);
		
		// 初始化导航引擎
		BdNaviManagerAdapter bdNaviManagerAdapter = BdNaviManagerAdapter.getInstance();
		bdNaviManagerAdapter.initNaviEngine(this);
		
		initFragments();
		initBroadcastReceiver();
	}
	
	private void initBroadcastReceiver(){
		mSearchResultBroadcastReceiver = new SearchResultBroadcastReceiver(this);
		mSearchResultBroadcastReceiver.registerReceiver();
	}
	
	@Override
	protected void onSaveInstanceState(Bundle outState)
	{
		//closeMapDisplaySetUIFragment();
		
		super.onSaveInstanceState(outState);
	}

	@Override
	protected void onRestoreInstanceState(Bundle savedInstanceState)
	{
		super.onRestoreInstanceState(savedInstanceState);
		
		if (savedInstanceState != null)
		{
			IFragmentsManager fragmentsManager = getFragmentsManager();
			if (fragmentsManager.getPausedFragmentSize() > 0)
			{
				hideMapOperFragment();
			}
		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu)
	{
 
		return false;
	}
	
 

	@Override
	protected void onResume()
	{
		super.onResume();
		
		if (mSavedInstanceState == null)
		{
			doIntentActionProcess();
		}
		else
		{
			mSavedInstanceState = null;
		}
	}

	@Override
	protected void onPause()
	{
		super.onPause();
	}

	@Override
	protected void onDestroy()
	{
		super.onDestroy();
		if(mSearchResultBroadcastReceiver != null){
			mSearchResultBroadcastReceiver.unregisterReceiver();
			mSearchResultBroadcastReceiver = null;
		}
		MarkerManagerLogic.getInstance().clear();
	}

	@Override
	public void onBackPressed()
	{
		try
		{
//			if (isMapDisplaySetUIVisible())
//			{
//				closeMapDisplaySetUIFragment();
//				return;
//			}
//			else
			if (getFragmentsManager().getPausedFragmentSize() != 0)
			{
				closePopFragmentOnTop();
				return;
			}
			else if (!mMapOperFragment.isPopupBarViewLayersHiding())
			{
				mMapOperFragment.resetSubViewLayers();
				return;
			}
			else
			{
				super.onBackPressed();
			}
			
			if (isLog)
			{
				Log.i(LOG_TAG, "onBackPressed()");
			}
		}
		catch (Exception ex)
		{
			if (isLog)
			{
				Log.e(LOG_TAG, "Exception:" + ex.getMessage());
				ex.printStackTrace();
			}
		}
	}
	
	@Override
	protected void onNewIntent(Intent intent)
	{
		setIntent(intent);
	}
	
	public boolean showExistentFragmentByTag(String tag)
	{
		return super.showExistentFragmentByTag(tag);
	}
	
	@Override
	protected void deleteAllPushedFragment()
	{
		try
		{
			super.deleteAllPushedFragment();
			
			IFragmentsManager fragmentsManager = getFragmentsManager();
			if (fragmentsManager.getPausedFragmentSize() <= 0)
			{
				appearMapOperFragment();
			}
		}
		catch (Exception ex)
		{
			System.err.println("Exception:" + ex.getMessage());
			ex.printStackTrace();
		}
	}
	
	@Override
	protected void showPushFragment(int containerViewId, FragmentEx fragment, String tag, boolean deleteSameInStack)
	{
		try
		{
			super.showPushFragment(containerViewId, fragment, tag, deleteSameInStack);
			
			IFragmentsManager fragmentsManager = getFragmentsManager();
			if (fragmentsManager.getPausedFragmentSize() > 0)
			{
				hideMapOperFragment();
			}
		}
		catch (Exception ex)
		{
			System.err.println("Exception:" + ex.getMessage());
			ex.printStackTrace();
		}
	}
	
	@Override
	public void closePopFragmentOnTop()
	{
		try
		{
			super.closePopFragmentOnTop();
			
			IFragmentsManager fragmentsManager = getFragmentsManager();
			if (fragmentsManager.getPausedFragmentSize() <= 0)
			{
				appearMapOperFragment();
			}
		}
		catch (Exception ex)
		{
			System.err.println("Exception:" + ex.getMessage());
			ex.printStackTrace();
		}
	}
	
	public MapViewFragment getMapViewFragment()
	{
		return mMapViewFragment;
	}
	
	public MapOperFragment getMapOperFragment()
	{
		return mMapOperFragment;
	}
	
//	public boolean isMapDisplaySetUIVisible()
//	{
//		boolean ret = (mMapDisplaySetFragment == null) ? false:true;
//		return ret;
//	}
	
//	public void showMapDisplaySetUIFragment(int viewTop)
//	{
//		mMapDisplaySetFragment = new MapDisplaySetFragment(viewTop);
//		replaceFragment(R.id.map_display_set_ui_container, mMapDisplaySetFragment, false);
//	}
	
//	public void closeMapDisplaySetUIFragment()
//	{
//		if (mMapDisplaySetFragment != null)
//		{
//			detachFragment(mMapDisplaySetFragment, false);
//			mMapDisplaySetFragment = null;
//		}
//	}
	
	public void showUIFragment(UIFragmentType fragmentType, String tag, boolean deleteSame)
	{
		showUIFragment(fragmentType, tag, null, deleteSame);
	}
	
	public void showUIFragment(UIFragmentType fragmentType, String tag, Bundle args, boolean deleteSame)
	{
		showUIFragment(fragmentType, tag, args, deleteSame, false);
	}
	
	public void showUIFragment(UIFragmentType fragmentType, String tag, Bundle args,
							   boolean deleteSame, boolean isFinishActivityOnCloseFragment)
	{
		int containerId = 0;
		FragmentEx fragment = null;
		
		if (fragmentType == null)
		{
			return;
		}
		try
		{
			Class<?> classz = mUIFragmentTypeMap.get(fragmentType);
			fragment = (FragmentEx) classz.newInstance();
			containerId = R.id.lbs_full_cover_ui_container;
			
			if (args != null)
			{
				fragment.setArguments(args);
			}
			showPushFragment(containerId, fragment, tag, deleteSame, isFinishActivityOnCloseFragment);
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
	
	public void showMapMenuBar(boolean isShow){
		mMapOperFragment.showMapMenuBar(isShow);
	}
	
}
